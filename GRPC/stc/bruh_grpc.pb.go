// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: bruh.proto

package GRPC_stc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	University_SayTeacher_FullMethodName = "/University/SayTeacher"
	University_SayStudent_FullMethodName = "/University/SayStudent"
	University_SayCourse_FullMethodName  = "/University/SayCourse"
)

// UniversityClient is the client API for University service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversityClient interface {
	SayTeacher(ctx context.Context, in *TeacherRequest, opts ...grpc.CallOption) (*TeacherReply, error)
	SayStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentReply, error)
	SayCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error)
}

type universityClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversityClient(cc grpc.ClientConnInterface) UniversityClient {
	return &universityClient{cc}
}

func (c *universityClient) SayTeacher(ctx context.Context, in *TeacherRequest, opts ...grpc.CallOption) (*TeacherReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeacherReply)
	err := c.cc.Invoke(ctx, University_SayTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityClient) SayStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentReply)
	err := c.cc.Invoke(ctx, University_SayStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityClient) SayCourse(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourseReply)
	err := c.cc.Invoke(ctx, University_SayCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniversityServer is the server API for University service.
// All implementations must embed UnimplementedUniversityServer
// for forward compatibility.
type UniversityServer interface {
	SayTeacher(context.Context, *TeacherRequest) (*TeacherReply, error)
	SayStudent(context.Context, *StudentRequest) (*StudentReply, error)
	SayCourse(context.Context, *CourseRequest) (*CourseReply, error)
	mustEmbedUnimplementedUniversityServer()
}

// UnimplementedUniversityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUniversityServer struct{}

func (UnimplementedUniversityServer) SayTeacher(context.Context, *TeacherRequest) (*TeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayTeacher not implemented")
}
func (UnimplementedUniversityServer) SayStudent(context.Context, *StudentRequest) (*StudentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayStudent not implemented")
}
func (UnimplementedUniversityServer) SayCourse(context.Context, *CourseRequest) (*CourseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayCourse not implemented")
}
func (UnimplementedUniversityServer) mustEmbedUnimplementedUniversityServer() {}
func (UnimplementedUniversityServer) testEmbeddedByValue()                    {}

// UnsafeUniversityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversityServer will
// result in compilation errors.
type UnsafeUniversityServer interface {
	mustEmbedUnimplementedUniversityServer()
}

func RegisterUniversityServer(s grpc.ServiceRegistrar, srv UniversityServer) {
	// If the following call pancis, it indicates UnimplementedUniversityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&University_ServiceDesc, srv)
}

func _University_SayTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServer).SayTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: University_SayTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServer).SayTeacher(ctx, req.(*TeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _University_SayStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServer).SayStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: University_SayStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServer).SayStudent(ctx, req.(*StudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _University_SayCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServer).SayCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: University_SayCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServer).SayCourse(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// University_ServiceDesc is the grpc.ServiceDesc for University service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var University_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "University",
	HandlerType: (*UniversityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayTeacher",
			Handler:    _University_SayTeacher_Handler,
		},
		{
			MethodName: "SayStudent",
			Handler:    _University_SayStudent_Handler,
		},
		{
			MethodName: "SayCourse",
			Handler:    _University_SayCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bruh.proto",
}
